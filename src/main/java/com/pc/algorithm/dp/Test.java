package com.pc.algorithm.dp;import java.util.Arrays;/** * * 金额amount * 面值[c1,c2,c3,c4] * * f(0) = 0 * f(n) = -1, n<0 * f(amount) = min{f(amount-ci)+1} * * * * @author pengchao * @date 11:23 2020-12-28 */public class Test {    public static void main(String[] args) {        System.out.println(dp(new int[]{1,2,5},1001));    }//    public static int coinChange(int[] coins, int amount) {//        if(amount<=0) {//            return -1;//        }////        int[] member = new int[amount];////        return dp(coins,amount,member);////    }    private static int dp(int[] coins, int amount) {        if(amount<0) {            return -1;        }        if(amount==0) {            return 0;        }        int[] dp = new int[amount+1];        int max = amount+1;        Arrays.fill(dp,max);        dp[0] = 0;        for(int i=1;i<=amount;i++) {            for(int coin: coins) {                if(coin>i) {                    continue;                }                dp[i] = Math.min(dp[i],dp[i-coin]+1);            }        }        return dp[amount]>amount ? -1 : dp[amount];    }}